#!/usr/bin/env python
PACKAGE = "terrain_map_server"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("max_depth", int_t, 0, "Maximum depth when traversing the octree to send out markers. 16: full depth / max. resolution", 16, 1, 16)

# robot attributes and skills
gen.add("robot_length", double_t, 0, "length of the robot in m", 0.5, 0.05, 1.5)
gen.add("robot_width", double_t, 0, "width of the robot in m", 0.4, 0.05, 1.5)
gen.add("robot_height", double_t, 0, "height of the robot in m", 0.4, 0.05, 1.5)
gen.add("min_step_height", double_t, 0, "minimum height of a step in m; less than this is considered continuous ground", 0.085, 0.01, 1.0)
gen.add("max_step_height", double_t, 0, "maximum height of a step in m; more than this is considered obstacle", 0.26, 0.01, 1.0)
gen.add("max_gap_length", double_t, 0, "maximum gap in a surface in m that is traversible; more than this is considered obstacle", 0.1, 0.01, 1.0)
gen.add("max_pitch", double_t, 0, "maximum pitch angle in DEG, where the robot can safely operate", 50, 0, 90)
gen.add("max_roll", double_t, 0, "maximum roll angle in DEG, where the robot can safely operate", 30, 0, 90)
gen.add("max_delta_pitch", double_t, 0, "maximum roll angle difference between two safe robot poses in DEG", 50, 0, 90)
gen.add("max_delta_roll", double_t, 0, "maximum roll angle difference between two safe robot poses in DEG", 30, 0, 90)
gen.add("max_step_pitch", double_t, 0, "maximum pitch angle in DEG when traversing steps or stairs, where the robot can safely operate", 50, 0, 90)
gen.add("linear_velocity", double_t, 0, "linear velocity of the robot in m/s", 0.25, 0.01, 10.0)
gen.add("angular_velocity", double_t, 0, "angular velocity of the robot in DEG/s", 30, 1, 360)

# terrain classification
gen.add("max_normal_angle_difference", double_t, 0, "maximum difference between two surface normals in DEG, more than this is considered two different surface segments", 5, 0, 90)
gen.add("max_origin_distance_difference", double_t, 0, "maximum difference in distance to origin in m; more than this is considered two different surface segments", 0.09, 0.00, 1.0)

# planning environment
gen.add("motion_primitive_resolution", double_t, 0, "resolution the motion primitives will be adapted to, should equal the map resolution", 0.025, 0.001, 5.0)
gen.add("motion_primitive_scale_factor", int_t, 0, "a factor to increase the x and y distances in the motion primitives", 2, 1, 10)
gen.add("discrete_cell_size_xy", double_t, 0, "size of a cell in x and y direction in m for the discrete planning environment", 0.05, 0.001, 5.0)
gen.add("discrete_cell_size_z", double_t, 0, "size of a cell in z direction in m for the discrete planning environment", 0.25, 0.001, 5.0)
gen.add("show_non_ground", bool_t, 0, "show occupied cells irrelevant for planning", False)

# costs
gen.add("cost_roll_factor", double_t, 0, "weight for the costs produced by the roll limit of the robot", 4.0, 1.0, 1000000.0)
gen.add("cost_pitch_factor", double_t, 0, "weight for the costs produced by the pitch limit of the robot", 2.0, 1.0, 1000000.0)
gen.add("cost_delta_roll_factor", double_t, 0, "weight for the costs produced by the delta roll limit of the robot", 4.0, 1.0, 1000000.0)
gen.add("cost_delta_pitch_factor", double_t, 0, "weight for the costs produced by the delta pitch limit of the robot", 2.0, 1.0, 1000000.0)
gen.add("cost_step_pitch_factor", double_t, 0, "weight for the costs produced by the pitch angle on steps or stairs", 10.0, 1.0, 1000000.0)

gen.add("edge_mean_line_distance_threshold", double_t, 0, "mean distance of points the line in m to consider an edge traversible", 0.01, 0.0, 1.0)
gen.add("edge_max_delta_yaw", double_t, 0, "maximum yaw difference in DEG between a robot and an traversible edge", 13.5, 0.0, 90)

# planner
plan_mode_enum = gen.enum([ 
                    gen.const("xy", int_t, 0, "xy expansion"),
                    gen.const("xy_theta", int_t, 1, "xy_theta expansion with euclidean distance heuristic"),
                    gen.const("xy_theta_mph", int_t, 2, "xy_theta expansion with to start precomputed xy path heuristic"),
                    gen.const("xy_theta_odsh", int_t, 3, "xy_theta expansion with on demand search heuristic") ,
                    gen.const("xy_theta_mph_full", int_t, 4, "xy_theta expansion with fully precomputed xy path heuristic") ],
                  "planning modes")

gen.add("planning_mode", int_t, 0, "path planning mode", 4, 0, 4, edit_method=plan_mode_enum)
gen.add("planner_return_first_solution", bool_t, 0, "whether the planner stops when finding the first solution; false for anytime planning", False)
gen.add("planner_initial_eps", double_t, 0, "initial greediness factor for heuristic cost estimation", 5.0, 1.0, 100.0)
gen.add("planner_final_eps", double_t, 0, "final greediness factor for heuristic cost estimation", 1.0, 1.0, 100.0)
gen.add("planner_eps_decrement", double_t, 0, "greediness factor decrement for heuristic cost estimation", 0.2, 0.01, 100.0)
gen.add("planner_max_time", double_t, 0, "maximum planning time in s", 300.0, 1.0, 1000.0)
gen.add("planner_repair_time", double_t, 0, "maximum planning time in s to improve a plan after the initial solution was found; should be lower than max time; negative to disable", -1, -1.0, 1000.0)

exit(gen.generate(PACKAGE, "octomap_server_node", "OctomapServer"))